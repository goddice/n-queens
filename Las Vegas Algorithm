/* Las Vegas Algorithm for N Queens Problem */

#include <iostream>
#include <ctime>
using namespace std;

enum { FALSE, TRUE };

int valid(int *board, int size);
int *gridSearch(int n);

int nTrials = 0;

int main()
{
	int   *solution; // This is an array to store the solution in a permutation of [0, 1, 2, ..., N]
	int    nQueens;

	cout << "Enter n where n >= 4:  ";
	cin >> nQueens;

	srand((int)time(NULL)); // Initialize the random sequence

	solution = gridSearch(nQueens); // Find a valid solution by Probabilistic Algorithm

	if (valid(solution, nQueens)) // Solution is valid
		cout << "Valid solution found!" << endl;
	else
		cout << "ERROR --- no invalid solution." << endl;
	cout << "It did " << nTrials << " trial(s)." << endl << endl;

	// Print the valid board
	for (int i = 0; i < nQueens; i++)
	{
		for (int j = 0; j < nQueens; j++)
		{
			if (j == solution[i]) cout << "X ";
			else cout << "O ";
		}
		cout << endl;
	}
	cout << endl;
}

int nextInt(int n) // Generate a random number between 0 ~ n
{
	double rtn;

	rtn = n * (rand() / (1.0 + RAND_MAX));
	if (rtn >= n)
		return n - 1;
	else
		return (int)rtn;
}


int *gridSearch(int n)
{
	// Allocate memory
	int *solution = new int[n];
	memset(solution, 0, n * sizeof(int));

	int    fail = TRUE;
	short *blocked = NULL;

	while (fail)
	{
		int row, col, k, d;

		if (blocked)
			delete blocked; blocked = NULL;
		// Initially all false
		blocked = new short[n * n];
		memset(blocked, 0, n * n * sizeof(short));
		nTrials++; // Number of trials plus one

		for (row = 0; row < n; row++)
		{
			col = nextInt(n); // Get next column number as a random integer
			for (k = 0; blocked[row*n + col] && k < n; k++)
				col = (col + 1) % n;
			if (blocked[row*n + col])
				break;
			solution[row] = col;
			for (k = row + 1; k < n; k++)
			{
				blocked[k*n + col] = TRUE;
				// row - col
				d = k - (row - col);
				if (d >= 0 && d < n)
					blocked[k*n + d] = TRUE;
				// row + col
				d = (row + col) - k;
				if (d >= 0 && d < n)
					blocked[k*n + d] = TRUE;
			} // end for k
		} // end for row
		fail = row < n;
	} // end while fail
	return solution;
}

// Verify (or reject) the validity of the board of indicated size.
int valid(int *board, int size)
{
	int row;
	// Take advantage of initialization to false
	int *diagChk = new int[2 * size - 1];
	memset(diagChk, 0, (2 * size - 1) * sizeof(int));
	int *antiChk = new int[2 * size - 1];
	memset(antiChk, 0, (2 * size - 1) * sizeof(int));

	//    mark (0, board[0], TRUE);
	diagChk[0 - board[0] + size - 1] = TRUE;
	antiChk[0 + board[0]] = TRUE;

	for (row = 1; row < size; row++)
		if ((diagChk[row - board[row] + size - 1] || antiChk[row + board[row]]))
			return FALSE;
		else
			//          mark (row, board[row], TRUE);
			diagChk[row - board[row] + size - 1] =
			antiChk[row + board[row]] = TRUE;
	return TRUE;
}
